{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/js/app.js"],"names":["Math","max","canvas","document","ctx","currentDirection","snakeSpeed","l","directionActions","T","point","x","y","direction","D","R","L","directionCoords","blockPositions","updateAppleCoords","randomX","randomIntFromInterval","randomY","appleCoords","setGameInterval","gameInterval","setInterval","checkAppleEat","generateNewPosition","updateSnakePosition","turnTimeout","headPointIndex","headPoint","addNewPoint","directionData","block","requiredCoord","lastBlockIndex","pointBlock","blockIndex","nextDirectionCoords","currentDirectionCoords","newPoint","context","G","B","alert","lastBlock","lastBlockDirection","lastBlockLastPoint","lastPointCurrentX","lastPointCurrentY","e","gameStopped","clearInterval"],"mappings":"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","file":"js/app.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"./\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","const canvas = document.getElementById('background-canvas');\nconst ctx = canvas.getContext('2d');\n\nctx.fillStyle = 'white';\nctx.fillRect(0, 0, canvas.width, canvas.height);\nlet currentDirection = 'R';\n\nlet snakeX = 0;\nlet snakeY = 0;\nconst snakeBlockWidth = 20;\nlet snakeHeight = 20;\nlet turnTimeout = false;\nlet snakeSpeed = 20;\nlet gameStopped = false;\nlet appleCoords = [];\nlet appleHeight = 20;\nlet appleWidth = 20;\nlet gameInterval;\nconst directionActions = {\n  T: point => {\n    if (point.y - snakeSpeed < 0) {\n      return { x: point.x, y: canvas.height - snakeSpeed, direction: 'T' };\n    }\n    return { x: point.x, y: point.y - snakeSpeed, direction: 'T' };\n  },\n  D: point => {\n    if (point.y + snakeSpeed >= canvas.height) {\n      return { x: point.x, y: 0, direction: 'D' };\n    }\n    return { x: point.x, y: point.y + snakeSpeed, direction: 'D' };\n  },\n  R: point => {\n    if (point.x + snakeSpeed >= canvas.width)\n      return { x: 0, y: point.y, direction: 'R' };\n    return { x: point.x + snakeSpeed, y: point.y, direction: 'R' };\n  },\n  L: point => {\n    if (point.x - snakeSpeed < 0)\n      return { x: canvas.width - snakeSpeed, y: point.y, direction: 'L' };\n    return { x: point.x - snakeSpeed, y: point.y, direction: 'L' };\n  }\n};\n\nlet directionCoords = [\n  {\n    blockPositions: [\n      { x: 0, y: 0 },\n      { x: 20, y: 0 },\n      { x: 40, y: 0 },\n      { x: 60, y: 0 }\n    ],\n    direction: 'R'\n  }\n];\n\nconst updateAppleCoords = () => {\n  const randomX = randomIntFromInterval(0, 29) * 20;\n  const randomY = randomIntFromInterval(0, 29) * 20;\n  appleCoords = [randomX, randomY];\n};\n\nconst setGameInterval = () => {\n  gameInterval = setInterval(() => {\n    checkAppleEat();\n    generateNewPosition(currentDirection);\n    updateSnakePosition();\n    turnTimeout = false;\n  }, 1000 / 14);\n};\n\nupdateAppleCoords();\nsetGameInterval();\n\nconst spawnApple = () => {\n  ctx.fillStyle = 'red';\n  ctx.fillRect(appleCoords[0], appleCoords[1], appleWidth, appleHeight);\n};\n\nconst resetCanvas = () => {\n  ctx.fillStyle = 'white';\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n};\n\nconst checkAppleEat = () => {\n  const headPointIndex = directionCoords[0].blockPositions.length - 1;\n  const headPoint = directionCoords[0].blockPositions[headPointIndex];\n  if (headPoint.x === appleCoords[0] && headPoint.y === appleCoords[1]) {\n    updateAppleCoords();\n    addNewPoint();\n  }\n};\n\nconst updateSnakePosition = () => {\n  resetCanvas();\n  spawnApple();\n  directionCoords.forEach(directionData => {\n    directionData.blockPositions.forEach(block => {\n      ctx.fillStyle = 'blue';\n      ctx.fillRect(block.x, block.y, 20, snakeHeight);\n    });\n  });\n};\nconst generateNewPosition = direction => {\n  const headPointIndex = directionCoords[0].blockPositions.length - 1;\n  const headPoint = directionCoords[0].blockPositions[headPointIndex];\n  if (directionCoords[0].direction !== direction) {\n    directionCoords.unshift({\n      blockPositions: [headPoint],\n      requiredCoord: {\n        x: headPoint.x,\n        y: headPoint.y\n      },\n      direction\n    });\n    directionCoords[1].blockPositions.splice(headPointIndex, 1);\n  }\n\n  directionCoords.forEach((pointBlock, blockIndex) => {\n    const lastBlockIndex = directionCoords.length - 1;\n\n    pointBlock.blockPositions.forEach((point, pointIndex) => {\n      if (blockIndex !== 0) {\n        const nextDirectionCoords = directionCoords[blockIndex - 1];\n        const currentDirectionCoords = directionCoords[blockIndex];\n        const {\n          x: requiredX,\n          y: requiredY\n        } = nextDirectionCoords.requiredCoord;\n        if (point.x === requiredX && point.y === requiredY) {\n          const newPoint = directionActions[nextDirectionCoords.direction](\n            point\n          );\n          directionCoords[blockIndex - 1].blockPositions.unshift(newPoint);\n          directionCoords[blockIndex].blockPositions.splice(pointIndex, 1);\n\n          if (\n            blockIndex === lastBlockIndex &&\n            directionCoords[blockIndex].blockPositions.length === 0\n          ) {\n            directionCoords.splice(blockIndex, 1);\n          }\n        } else {\n          const newPoint = directionActions[currentDirectionCoords.direction](\n            point\n          );\n          directionCoords[blockIndex].blockPositions[pointIndex] = newPoint;\n        }\n      } else {\n        const currentDirectionCoords = directionCoords[0];\n        const newPoint = directionActions[currentDirectionCoords.direction](\n          point\n        );\n        directionCoords[blockIndex].blockPositions[pointIndex] = newPoint;\n        if (pointIndex === headPointIndex) {\n          const context = canvas.getContext('2d');\n          const [R, G, B] = context.getImageData(\n            newPoint.x,\n            newPoint.y,\n            1,\n            1\n          ).data;\n\n          if (R === 0 && G === 0 && B === 255) {\n            alert('you lost');\n          }\n        }\n      }\n    });\n  });\n};\n\nconst addNewPoint = () => {\n  const lastBlockIndex = directionCoords.length - 1;\n  const lastBlock = directionCoords[lastBlockIndex];\n  const lastBlockDirection = lastBlock.direction;\n  const lastBlockLastPoint = lastBlock.blockPositions[0];\n\n  const { x: lastPointCurrentX, y: lastPointCurrentY } = lastBlockLastPoint;\n  const { x: lastPointNextX, y: lastPointNextY } = directionActions[\n    lastBlockDirection\n  ](lastBlockLastPoint);\n\n  const newPoint = {\n    x: lastPointCurrentX + (lastPointCurrentX - lastPointNextX),\n    y: lastPointCurrentY + (lastPointCurrentY - lastPointNextY)\n  };\n\n  directionCoords[lastBlockIndex].blockPositions.unshift(newPoint);\n};\n\ndocument.onkeydown = function keyPress(e) {\n  if (e.key === 'Escape') {\n    if (!gameStopped) {\n      clearInterval(gameInterval);\n      gameStopped = true;\n    } else {\n      gameStopped = false;\n      setGameInterval();\n    }\n  }\n\n  if (turnTimeout) return;\n  if (e.keyCode == '38') {\n    if (currentDirection !== 'D') currentDirection = 'T';\n    turnTimeout = true;\n  } else if (e.keyCode == '40') {\n    if (currentDirection !== 'T') currentDirection = 'D';\n    turnTimeout = true;\n  } else if (e.keyCode == '37') {\n    if (currentDirection !== 'R') currentDirection = 'L';\n    turnTimeout = true;\n  } else if (e.keyCode == '39') {\n    if (currentDirection !== 'L') currentDirection = 'R';\n    turnTimeout = true;\n  }\n};\n\nfunction randomIntFromInterval(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n"],"sourceRoot":""}